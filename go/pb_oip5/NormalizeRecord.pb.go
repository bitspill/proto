// Code generated by protoc-gen-go. DO NOT EDIT.
// source: NormalizeRecord.proto

package pb_oip5

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// https://github.com/golang/protobuf/blob/882cf97/protoc-gen-go/descriptor/descriptor.proto#L136-L168
type Field_Type int32

const (
	// 0 is reserved for errors.
	Field_TYPE_ERROR Field_Type = 0
	// Order is weird for historical reasons.
	Field_TYPE_DOUBLE Field_Type = 1
	Field_TYPE_FLOAT  Field_Type = 2
	// Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
	// negative values are likely.
	Field_TYPE_INT64  Field_Type = 3
	Field_TYPE_UINT64 Field_Type = 4
	// Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
	// negative values are likely.
	Field_TYPE_INT32   Field_Type = 5
	Field_TYPE_FIXED64 Field_Type = 6
	Field_TYPE_FIXED32 Field_Type = 7
	Field_TYPE_BOOL    Field_Type = 8
	Field_TYPE_STRING  Field_Type = 9
	// Tag-delimited aggregate.
	// Group type is deprecated and not supported in proto3. However, Proto3
	// implementations should still be able to parse the group wire format and
	// treat group fields as unknown fields.
	Field_TYPE_GROUP   Field_Type = 10
	Field_TYPE_MESSAGE Field_Type = 11
	// New in version 2.
	Field_TYPE_BYTES    Field_Type = 12
	Field_TYPE_UINT32   Field_Type = 13
	Field_TYPE_ENUM     Field_Type = 14
	Field_TYPE_SFIXED32 Field_Type = 15
	Field_TYPE_SFIXED64 Field_Type = 16
	Field_TYPE_SINT32   Field_Type = 17
	Field_TYPE_SINT64   Field_Type = 18
)

var Field_Type_name = map[int32]string{
	0:  "TYPE_ERROR",
	1:  "TYPE_DOUBLE",
	2:  "TYPE_FLOAT",
	3:  "TYPE_INT64",
	4:  "TYPE_UINT64",
	5:  "TYPE_INT32",
	6:  "TYPE_FIXED64",
	7:  "TYPE_FIXED32",
	8:  "TYPE_BOOL",
	9:  "TYPE_STRING",
	10: "TYPE_GROUP",
	11: "TYPE_MESSAGE",
	12: "TYPE_BYTES",
	13: "TYPE_UINT32",
	14: "TYPE_ENUM",
	15: "TYPE_SFIXED32",
	16: "TYPE_SFIXED64",
	17: "TYPE_SINT32",
	18: "TYPE_SINT64",
}
var Field_Type_value = map[string]int32{
	"TYPE_ERROR":    0,
	"TYPE_DOUBLE":   1,
	"TYPE_FLOAT":    2,
	"TYPE_INT64":    3,
	"TYPE_UINT64":   4,
	"TYPE_INT32":    5,
	"TYPE_FIXED64":  6,
	"TYPE_FIXED32":  7,
	"TYPE_BOOL":     8,
	"TYPE_STRING":   9,
	"TYPE_GROUP":    10,
	"TYPE_MESSAGE":  11,
	"TYPE_BYTES":    12,
	"TYPE_UINT32":   13,
	"TYPE_ENUM":     14,
	"TYPE_SFIXED32": 15,
	"TYPE_SFIXED64": 16,
	"TYPE_SINT32":   17,
	"TYPE_SINT64":   18,
}

func (x Field_Type) String() string {
	return proto.EnumName(Field_Type_name, int32(x))
}
func (Field_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{2, 0} }

type NormalizeRecordProto struct {
	// standard template ID which triggers this meta-type
	MainTemplate uint32 `protobuf:"fixed32,3,opt,name=mainTemplate" json:"mainTemplate,omitempty"`
	// fields comprising this new meta-type
	Fields []*NormalField `protobuf:"bytes,4,rep,name=fields" json:"fields,omitempty"`
}

func (m *NormalizeRecordProto) Reset()                    { *m = NormalizeRecordProto{} }
func (m *NormalizeRecordProto) String() string            { return proto.CompactTextString(m) }
func (*NormalizeRecordProto) ProtoMessage()               {}
func (*NormalizeRecordProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *NormalizeRecordProto) GetMainTemplate() uint32 {
	if m != nil {
		return m.MainTemplate
	}
	return 0
}

func (m *NormalizeRecordProto) GetFields() []*NormalField {
	if m != nil {
		return m.Fields
	}
	return nil
}

type NormalField struct {
	// new ES compatible name
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// path to the source value
	Path []*Field `protobuf:"bytes,2,rep,name=path" json:"path,omitempty"`
}

func (m *NormalField) Reset()                    { *m = NormalField{} }
func (m *NormalField) String() string            { return proto.CompactTextString(m) }
func (*NormalField) ProtoMessage()               {}
func (*NormalField) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *NormalField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NormalField) GetPath() []*Field {
	if m != nil {
		return m.Path
	}
	return nil
}

type Field struct {
	// Tag number in prior Proto message
	Tag int32 `protobuf:"varint,1,opt,name=tag" json:"tag,omitempty"`
	// Expected type
	// if type_message resolution proceeds into the message
	// if type_message and type_name == oip.txid resolves linked record before proceeding
	// if type doesn't match field is ignored
	Type Field_Type `protobuf:"varint,2,opt,name=type,enum=oipProto.oip5.Field_Type" json:"type,omitempty"`
	// Enter specified details template
	// Set either tag/type OR template
	Template uint32 `protobuf:"fixed32,3,opt,name=template" json:"template,omitempty"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Field) GetTag() int32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *Field) GetType() Field_Type {
	if m != nil {
		return m.Type
	}
	return Field_TYPE_ERROR
}

func (m *Field) GetTemplate() uint32 {
	if m != nil {
		return m.Template
	}
	return 0
}

func init() {
	proto.RegisterType((*NormalizeRecordProto)(nil), "oipProto.oip5.NormalizeRecordProto")
	proto.RegisterType((*NormalField)(nil), "oipProto.oip5.NormalField")
	proto.RegisterType((*Field)(nil), "oipProto.oip5.Field")
	proto.RegisterEnum("oipProto.oip5.Field_Type", Field_Type_name, Field_Type_value)
}

func init() { proto.RegisterFile("NormalizeRecord.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x6e, 0x9b, 0x40,
	0x10, 0x87, 0x8b, 0xc1, 0x4e, 0x3c, 0xfe, 0x93, 0xc9, 0x2a, 0x95, 0x68, 0x4e, 0x16, 0x27, 0xaa,
	0xaa, 0x58, 0xc2, 0xae, 0x2f, 0x3d, 0xc5, 0xca, 0xc6, 0xb2, 0xea, 0x80, 0xb5, 0x80, 0xd4, 0xf4,
	0x12, 0xe1, 0x64, 0x4b, 0x90, 0x8c, 0x77, 0xe5, 0x52, 0x55, 0xe9, 0x3b, 0xf5, 0x35, 0xfa, 0x5c,
	0x15, 0x4b, 0xba, 0x35, 0x56, 0x4f, 0xcc, 0xfc, 0xf6, 0xe3, 0x9b, 0x41, 0x2c, 0xbc, 0x0e, 0xc4,
	0xbe, 0x48, 0xb7, 0xf9, 0x4f, 0xce, 0xf8, 0x83, 0xd8, 0x3f, 0x7a, 0x72, 0x2f, 0x4a, 0x41, 0x06,
	0x22, 0x97, 0xeb, 0xaa, 0xf2, 0x44, 0x2e, 0x3f, 0x38, 0x3b, 0xb8, 0x38, 0xe2, 0xd4, 0x21, 0x71,
	0xa0, 0x5f, 0xa4, 0xf9, 0x2e, 0xe6, 0x85, 0xdc, 0xa6, 0x25, 0xb7, 0xcd, 0x91, 0xe1, 0x9e, 0xb0,
	0x46, 0x46, 0x7c, 0xe8, 0x7c, 0xcd, 0xf9, 0xf6, 0xf1, 0x9b, 0x6d, 0x8d, 0x4c, 0xb7, 0xe7, 0x5f,
	0x7a, 0x0d, 0xb7, 0x57, 0x8b, 0x6f, 0x2a, 0x84, 0xbd, 0x90, 0xce, 0x27, 0xe8, 0x1d, 0xc4, 0x84,
	0x80, 0xb5, 0x4b, 0x0b, 0x6e, 0x1b, 0x23, 0xc3, 0xed, 0x32, 0x55, 0x13, 0x17, 0x2c, 0x99, 0x96,
	0x4f, 0x76, 0x4b, 0x49, 0x2f, 0x8e, 0xa4, 0xb5, 0x4e, 0x11, 0xce, 0x2f, 0x13, 0xda, 0xb5, 0x07,
	0xc1, 0x2c, 0xd3, 0x4c, 0x69, 0xda, 0xac, 0x2a, 0xc9, 0x7b, 0xb0, 0xca, 0x67, 0xc9, 0xed, 0xd6,
	0xc8, 0x70, 0x87, 0xfe, 0x9b, 0xff, 0x59, 0xbc, 0xf8, 0x59, 0x72, 0xa6, 0x30, 0x72, 0x09, 0xa7,
	0x65, 0xf3, 0x5b, 0x75, 0xef, 0xfc, 0x6e, 0x81, 0x55, 0xa1, 0x64, 0x08, 0x10, 0xdf, 0xad, 0xe9,
	0x3d, 0x65, 0x2c, 0x64, 0xf8, 0x8a, 0x9c, 0x41, 0x4f, 0xf5, 0xd7, 0x61, 0x32, 0x5f, 0x51, 0x34,
	0x34, 0x70, 0xb3, 0x0a, 0xaf, 0x62, 0x6c, 0xe9, 0x7e, 0x19, 0xc4, 0xb3, 0x29, 0x9a, 0xfa, 0x85,
	0xa4, 0x0e, 0xac, 0x43, 0x60, 0xe2, 0x63, 0x9b, 0x20, 0xf4, 0x6b, 0xc1, 0xf2, 0x33, 0xbd, 0x9e,
	0x4d, 0xb1, 0xd3, 0x4c, 0x26, 0x3e, 0x9e, 0x90, 0x01, 0x74, 0x55, 0x32, 0x0f, 0xc3, 0x15, 0x9e,
	0x6a, 0x67, 0x14, 0xb3, 0x65, 0xb0, 0xc0, 0xae, 0x76, 0x2e, 0x58, 0x98, 0xac, 0x11, 0xb4, 0xe1,
	0x96, 0x46, 0xd1, 0xd5, 0x82, 0x62, 0x4f, 0x13, 0xf3, 0xbb, 0x98, 0x46, 0xd8, 0x6f, 0xac, 0x35,
	0xf1, 0x71, 0xa0, 0x47, 0xd0, 0x20, 0xb9, 0xc5, 0x21, 0x39, 0x87, 0x41, 0x3d, 0xe2, 0xef, 0x12,
	0x67, 0x47, 0xd1, 0x6c, 0x8a, 0xf8, 0x6f, 0x91, 0xda, 0x72, 0xde, 0x08, 0x66, 0x53, 0x24, 0xf3,
	0x77, 0x5f, 0xde, 0x66, 0x79, 0xf9, 0xf4, 0x7d, 0xe3, 0x3d, 0x88, 0x62, 0x2c, 0x72, 0xf9, 0x23,
	0x1b, 0xab, 0x5b, 0x39, 0xce, 0xc4, 0x58, 0x6e, 0xee, 0xab, 0x5f, 0xf3, 0xf1, 0xe5, 0xb9, 0xe9,
	0xa8, 0x93, 0xc9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0xbe, 0xe5, 0xea, 0xc8, 0x02, 0x00,
	0x00,
}
