// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pubkey.proto

package pb_oip

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Currently supported message types
type NetworkTypes int32

const (
	// Invalid
	NetworkTypes_InvalidNetwork NetworkTypes = 0
	// FLO address message signing
	NetworkTypes_FloNetwork NetworkTypes = 1
)

var NetworkTypes_name = map[int32]string{
	0: "InvalidNetwork",
	1: "FloNetwork",
}
var NetworkTypes_value = map[string]int32{
	"InvalidNetwork": 0,
	"FloNetwork":     1,
}

func (x NetworkTypes) String() string {
	return proto.EnumName(NetworkTypes_name, int32(x))
}
func (NetworkTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type PubKey struct {
	Network NetworkTypes `protobuf:"varint,1,opt,name=network,enum=oipProto.NetworkTypes" json:"network,omitempty"`
	Raw     []byte       `protobuf:"bytes,2,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (m *PubKey) Reset()                    { *m = PubKey{} }
func (m *PubKey) String() string            { return proto.CompactTextString(m) }
func (*PubKey) ProtoMessage()               {}
func (*PubKey) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *PubKey) GetNetwork() NetworkTypes {
	if m != nil {
		return m.Network
	}
	return NetworkTypes_InvalidNetwork
}

func (m *PubKey) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func init() {
	proto.RegisterType((*PubKey)(nil), "oipProto.PubKey")
	proto.RegisterEnum("oipProto.NetworkTypes", NetworkTypes_name, NetworkTypes_value)
}

func init() { proto.RegisterFile("pubkey.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x28, 0x4d, 0xca,
	0x4e, 0xad, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc8, 0xcf, 0x2c, 0x08, 0x00, 0xb1,
	0x94, 0x7c, 0xb8, 0xd8, 0x02, 0x4a, 0x93, 0xbc, 0x53, 0x2b, 0x85, 0x0c, 0xb8, 0xd8, 0xf3, 0x52,
	0x4b, 0xca, 0xf3, 0x8b, 0xb2, 0x25, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0xc4, 0xf4, 0x60, 0xaa,
	0xf4, 0xfc, 0x20, 0x12, 0x21, 0x95, 0x05, 0xa9, 0xc5, 0x41, 0x30, 0x65, 0x42, 0x02, 0x5c, 0xcc,
	0x45, 0x89, 0xe5, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x20, 0xa6, 0x96, 0x11, 0x17, 0x0f,
	0xb2, 0x52, 0x21, 0x21, 0x2e, 0x3e, 0xcf, 0xbc, 0xb2, 0xc4, 0x9c, 0xcc, 0x14, 0xa8, 0xb0, 0x00,
	0x83, 0x10, 0x1f, 0x17, 0x97, 0x5b, 0x4e, 0x3e, 0x8c, 0xcf, 0xe8, 0xa4, 0x19, 0xa5, 0x9e, 0x9e,
	0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x9f, 0x9f, 0x59, 0x50, 0x9e, 0xae, 0x0f,
	0x76, 0xa5, 0x7e, 0x7a, 0xbe, 0x7e, 0x41, 0x52, 0x7c, 0x7e, 0x66, 0x81, 0x35, 0x84, 0x4a, 0x62,
	0x03, 0x8b, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x9d, 0x9f, 0x00, 0xcd, 0x00, 0x00,
	0x00,
}
